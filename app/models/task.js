// Generated by CoffeeScript 1.6.2
(function() {
  var BackgroundImage, Comments, Deletion, Finished, Initialized, List, Task, TestStorage, User, Version, exports;

  Finished = Nimbus.Model.setup("Finished", ["name", "done", "time", "duedate", "note", "order", "synced", "listid", "time_finished"]);

  Deletion = Nimbus.Model.setup("Deletion", ["deletion_id", "listid"]);

  Task = Nimbus.Model.setup("Task", ["name", "done", "time", "duedate", "note", "order", "listid", "parent_id", "level", "userid", "status", "start_date", "end_date", "synced", "priority"]);

  Task.extend({
    PreviousCache: {},
    DeletionStorage: Deletion,
    active: function(id) {
      return this.select(function(item) {
        return !item.done && (item.listid === id);
      });
    },
    done: function(id) {
      return this.select(function(item) {
        return !!item.done && (item.listid === id);
      });
    },
    list: function(id) {
      return this.select(function(item) {
        return item.listid === id;
      });
    },
    print_by_order: function() {
      var list, ordered, task, _i, _len, _ref, _results;

      _ref = List.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        console.log(list.name, list.id);
        ordered = Task.list(list.id).sort(Task.ordersort);
        _results.push((function() {
          var _j, _len1, _results1;

          _results1 = [];
          for (_j = 0, _len1 = ordered.length; _j < _len1; _j++) {
            task = ordered[_j];
            _results1.push(console.log(task.order, task.name, task.id, task.level, task.parent_id));
          }
          return _results1;
        })());
      }
      return _results;
    },
    find_larger_than_order_in_list: function(order, list, level) {
      return this.select(function(item) {
        return item.listid === list && item.level === level && item.order > order;
      });
    },
    find_task_by_parent_id: function(search_id) {
      return this.select(function(item) {
        return item.parent_id === search_id;
      });
    },
    synced: function() {
      return this.select(function(item) {
        return !item.synced || !item.updated;
      });
    },
    destroyDone: function(id) {
      return this.done(id).forEach(function(rec) {
        if (rec.synced === true) {
          Deletion.create({
            deletion_id: rec.id
          });
        }
        return rec.destroy();
      });
    },
    logDone: function(id) {
      return this.done(id).forEach(function(rec) {
        Finished.create({
          name: rec.name,
          note: rec.note,
          listid: rec.listid,
          time_finished: moment().format('MM/DD/YYYY')
        });
        return rec.destroy();
      });
    },
    find_by_user: function(id) {
      return this.select(function(item) {
        return item.userid === id;
      });
    },
    find_by_content: function(content) {
      return this.select(function(item) {
        return item.name === content;
      });
    },
    save_current_order_of_list: function(list) {
      var task, _i, _len, _ref;

      window.currently_syncing = true;
      _ref = Task.list(list);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.order !== window.taskdict[task.id].el.index()) {
          task.order = window.taskdict[task.id].el.index();
          task.save();
        }
      }
      return window.currently_syncing = false;
    },
    list_sort_by: function(listid, field_name, ascend_descend) {
      var a, counter, fieldsort, sorted, _i, _len, _results;

      if (ascend_descend) {
        fieldsort = function(a, b) {
          var x, y;

          x = a[field_name] != null ? a[field_name] : 0;
          y = b[field_name] != null ? b[field_name] : 0;
          if (x > y) {
            return -1;
          } else {
            return 1;
          }
        };
      } else {
        fieldsort = function(a, b) {
          var x, y;

          x = a[field_name] != null ? a[field_name] : 0;
          y = b[field_name] != null ? b[field_name] : 0;
          if (x < y) {
            return -1;
          } else {
            return 1;
          }
        };
      }
      sorted = Task.list(listid).sort(fieldsort);
      counter = 0;
      _results = [];
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        a = sorted[_i];
        a.order = counter;
        a.save();
        _results.push(counter = counter + 1);
      }
      return _results;
    }
  });

  Task.ordersort = function(a, b) {
    if (a.order < b.order) {
      return -1;
    } else {
      return 1;
    }
  };

  List = Nimbus.Model.setup("List", ["name", "description", "time", "updated", "google_id", "synced"]);

  List.extend({
    PrintAll: function() {
      var i, _i, _len, _ref, _results;

      _ref = List.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(console.log(i.name, i.id, i.google_id));
      }
      return _results;
    }
  });

  Version = Spine.Model.setup("Version", ["number"]);

  Version.extend(Spine.Model.Local);

  Initialized = Spine.Model.setup("Initialized", ["flag"]);

  Initialized.extend(Spine.Model.Local);

  TestStorage = Spine.Model.setup("TestStorage", ["stored"]);

  TestStorage.extend(Spine.Model.Local);

  BackgroundImage = Spine.Model.setup("BackgroundImage", ["image"]);

  BackgroundImage.extend(Spine.Model.Local);

  User = Nimbus.Model.setup("User", ["name", "role", "color", "pic"]);

  Comments = Nimbus.Model.setup("Comments", ["comment", "userid", "timestamp"]);

  exports = this;

  exports.Task = Task;

  exports.List = List;

  exports.Version = Version;

  exports.Initialized = Initialized;

  exports.Finished = Finished;

  exports.BackgroundImage = BackgroundImage;

  exports.User = User;

}).call(this);
