// Generated by CoffeeScript 1.4.0
(function() {

  window.assign_parents = function(tasks) {
    var latest_parent, modified, previous_level, task, tracker, _i, _len;
    tracker = {};
    modified = [];
    tasks = tasks.sort(Task.ordersort);
    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
      task = tasks[_i];
      log("order", task.name);
      if (!(task.level != null) || Number(task.level) === 0) {
        tracker[0] = task.id;
        task.level = 0;
        if (task.parent_id !== "") {
          task.parent_id = "";
          task.save();
        } else {
          log("no change really");
          window.currently_syncing = true;
          task.save();
          window.currently_syncing = false;
        }
        modified.push(task.id);
      } else {
        console.log("tried to assign", task.name);
        if (task.order === 0) {
          task.level = 0;
          window.currently_syncing = true;
          task.save();
          window.currently_syncing = false;
          break;
        }
        tracker[Number(task.level)] = task.id;
        previous_level = Number(task.level) - 1;
        latest_parent = tracker[previous_level];
        if (latest_parent !== task.parent_id) {
          task.parent_id = latest_parent;
          task.time = moment().toString();
          task.save();
          modified.push(task.id);
        }
      }
    }
    return modified;
  };

  /*
  #test 1, two level 0', nothing happens
  a = id:"one", level:"0"
  b = id:"two", level:"0"
  
  window.test_array_1 = [ a, b ]
  
  #test 2, one level 0, one level 1, result should be the first is the parent of the second
  c = id:"one", level:"0"
  d = id:"two", level:"1"
  
  window.test_array_2 = [ c, d ]
  
  #test 3, level 0, 1, 2, results should be a chain of parents
  e = id:"one", level:"0"
  f = id:"two", level:"1"
  g = id:"three", level:"2"
  
  window.test_array_3 = [ e, f, g ]
  
  #test 4, level 0, 0, 1, result N N 2
  h = id:"one", level:"0"
  i = id:"two", level:"0"
  j = id:"three", level:"1"
  
  window.test_array_4 = [ h, i, j ]
  */


  window.counter = 0;

  window.bypass = {};

  window.parent = {};

  window.assign_children = function(parent, childs, parent_dict) {
    var child, _i, _len, _ref, _results;
    _ref = parent_dict[parent.id];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.order = window.counter;
      child.level = parent.level + 1;
      child.save();
      window.counter = window.counter + 1;
      if (parent_dict[child.id] != null) {
        _results.push(window.assign_children(child, parent_dict[child.id], parent_dict));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.assign_order = function(tasks) {
    var task, _i, _j, _len, _len1;
    window.counter = 0;
    window.parent = {};
    window.currently_syncing = true;
    log(tasks);
    tasks = tasks.sort(Task.ordersort);
    log("Assign Order tasks", tasks);
    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
      task = tasks[_i];
      if (task.parent_id != null) {
        if (window.parent[task.parent_id] != null) {
          window.parent[task.parent_id].push(task);
        } else {
          window.parent[task.parent_id] = [task];
        }
      }
    }
    log("parent div", window.parent);
    for (_j = 0, _len1 = tasks.length; _j < _len1; _j++) {
      task = tasks[_j];
      if ((window.parent[task.id] != null) && ((task.parent_id === null) || (task.parent_id === "") || (task.parent_id === void 0))) {
        task.order = window.counter;
        task.level = 0;
        task.save();
        window.counter = window.counter + 1;
        window.assign_children(task, parent[task.id], parent);
      } else if ((task.parent_id != null) && task.parent_id !== "") {
        log(task.name, " already assigned or going to be assigned");
      } else {
        task.order = window.counter;
        task.level = 0;
        task.save();
        window.counter = window.counter + 1;
      }
    }
    return window.currently_syncing = false;
  };

  /*
  #test that the parent mapping works
  l = List.init( id: "thelist", name: "thelist" )
  l.save()
  a = Task.init( id:"one", order: 1, listid: "thelist" )
  a.save()
  b = Task.init( id:"two", parent_id:"one", order: 2, listid: "thelist" )
  b.save()
  c = Task.init( id:"three", parent_id:"one", order: 3, listid: "thelist" )
  c.save()
  
  window.test_array_i = [a, b, c]
  */


}).call(this);
