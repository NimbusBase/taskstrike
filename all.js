// Generated by CoffeeScript 1.6.2
(function() {
  var BackgroundImage, Comments, Deletion, Finished, Initialized, List, Task, TestStorage, User, Version, exports, make_child, nextItem, open_for_edit, pressed_delete, prevItem, recurse_through_children, setting_url, sync_object, untab, updateItems, waitForFinalEvent;

  sync_object = {
    "GDrive": {
      "key": "424243246254-n6b2v8j4j09723ktif41ln247n75pnts.apps.googleusercontent.com",
      "scope": "https://www.googleapis.com/auth/drive",
      "app_name": "taskstrike"
    },
    "Dropbox": {
      "key": "q5yx30gr8mcvq4f",
      "secret": "qy64qphr70lwui5",
      "app_name": "taskstrike"
    }
  };

  Nimbus.Auth.setup(sync_object);

  (function() {
    var $, Class, Controller, Events, Log, Model, Spine, eventSplitter, isArray, makeArray, moduleKeywords;

    if (typeof exports !== "undefined") {
      Spine = exports;
    } else {
      Spine = this.Spine = {};
    }
    Spine.version = "0.0.4";
    $ = Spine.$ = this.jQuery || this.Zepto || function() {
      return arguments[0];
    };
    makeArray = Spine.makeArray = function(args) {
      return Array.prototype.slice.call(args, 0);
    };
    isArray = Spine.isArray = function(value) {
      return Object.prototype.toString.call(value) === "[object Array]";
    };
    if (typeof Array.prototype.indexOf === "undefined") {
      Array.prototype.indexOf = function(value) {
        var i;

        i = 0;
        while (i < this.length) {
          if (this[i] === value) {
            return i;
          }
          i++;
        }
        return -1;
      };
    }
    Events = Spine.Events = {
      bind: function(ev, callback) {
        var calls, evs, i;

        evs = ev.split(" ");
        calls = this._callbacks || (this._callbacks = {});
        i = 0;
        while (i < evs.length) {
          (this._callbacks[evs[i]] || (this._callbacks[evs[i]] = [])).push(callback);
          i++;
        }
        return this;
      },
      trigger: function() {
        var args, calls, ev, i, l, list;

        args = makeArray(arguments);
        ev = args.shift();
        if (!(calls = this._callbacks)) {
          return false;
        }
        if (!(list = this._callbacks[ev])) {
          return false;
        }
        i = 0;
        l = list.length;
        while (i < l) {
          if (list[i].apply(this, args) === false) {
            return false;
          }
          i++;
        }
        return true;
      },
      unbind: function(ev, callback) {
        var calls, i, l, list;

        if (!ev) {
          this._callbacks = {};
          return this;
        }
        if (!(calls = this._callbacks)) {
          return this;
        }
        if (!(list = calls[ev])) {
          return this;
        }
        if (!callback) {
          delete this._callbacks[ev];
          return this;
        }
        i = 0;
        l = list.length;
        while (i < l) {
          if (callback === list[i]) {
            list = list.slice();
            list.splice(i, 1);
            calls[ev] = list;
            break;
          }
          i++;
        }
        return this;
      }
    };
    Log = Spine.Log = {
      trace: true,
      logPrefix: "(App)",
      log: function() {
        var args;

        if (!this.trace) {
          return;
        }
        if (typeof console === "undefined") {
          return;
        }
        args = makeArray(arguments);
        if (this.logPrefix) {
          args.unshift(this.logPrefix);
        }
        console.log.apply(console, args);
        return this;
      }
    };
    if (typeof Object.create !== "function") {
      Object.create = function(o) {
        var F;

        F = function() {};
        F.prototype = o;
        return new F();
      };
    }
    moduleKeywords = ["included", "extended"];
    Class = Spine.Class = {
      inherited: function() {},
      created: function() {},
      prototype: {
        initialize: function() {},
        init: function() {}
      },
      create: function(include, extend) {
        var object;

        object = Object.create(this);
        object.parent = this;
        object.prototype = object.fn = Object.create(this.prototype);
        if (include) {
          object.include(include);
        }
        if (extend) {
          object.extend(extend);
        }
        object.created();
        this.inherited(object);
        return object;
      },
      init: function() {
        var instance;

        instance = Object.create(this.prototype);
        instance.parent = this;
        instance.initialize.apply(instance, arguments);
        instance.init.apply(instance, arguments);
        return instance;
      },
      proxy: function(func) {
        var thisObject;

        thisObject = this;
        return function() {
          return func.apply(thisObject, arguments);
        };
      },
      proxyAll: function() {
        var functions, i, _results;

        functions = makeArray(arguments);
        i = 0;
        _results = [];
        while (i < functions.length) {
          this[functions[i]] = this.proxy(this[functions[i]]);
          _results.push(i++);
        }
        return _results;
      },
      include: function(obj) {
        var included, key;

        for (key in obj) {
          if (moduleKeywords.indexOf(key) === -1) {
            this.fn[key] = obj[key];
          }
        }
        included = obj.included;
        if (included) {
          included.apply(this);
        }
        return this;
      },
      extend: function(obj) {
        var extended, key;

        for (key in obj) {
          if (moduleKeywords.indexOf(key) === -1) {
            this[key] = obj[key];
          }
        }
        extended = obj.extended;
        if (extended) {
          extended.apply(this);
        }
        return this;
      }
    };
    Class.prototype.proxy = Class.proxy;
    Class.prototype.proxyAll = Class.proxyAll;
    Class.inst = Class.init;
    Class.sub = Class.create;
    Spine.guid = function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r, v;

        r = Math.random() * 16 | 0;
        v = (c === "x" ? r : r & 0x3 | 0x8);
        return v.toString(16);
      }).toUpperCase();
    };
    Model = Spine.Model = Class.create();
    Model.extend(Events);
    Model.extend({
      setup: function(name, atts) {
        var model;

        model = Model.sub();
        if (name) {
          model.name = name;
        }
        if (atts) {
          model.attributes = atts;
        }
        return model;
      },
      created: function(sub) {
        this.records = {};
        return this.attributes = (this.attributes ? makeArray(this.attributes) : []);
      },
      find: function(id) {
        var record;

        record = this.records[id];
        if (!record) {
          throw "Unknown record";
        }
        return record.clone();
      },
      exists: function(id) {
        var e;

        try {
          return this.find(id);
        } catch (_error) {
          e = _error;
          return false;
        }
      },
      refresh: function(values) {
        var i, il, record;

        values = this.fromJSON(values);
        this.records = {};
        i = 0;
        il = values.length;
        while (i < il) {
          record = values[i];
          record.newRecord = false;
          this.records[record.id] = record;
          i++;
        }
        this.trigger("refresh");
        return this;
      },
      select: function(callback) {
        var key, result;

        result = [];
        for (key in this.records) {
          if (callback(this.records[key])) {
            result.push(this.records[key]);
          }
        }
        return this.cloneArray(result);
      },
      findByAttribute: function(name, value) {
        var key;

        for (key in this.records) {
          if (this.records[key][name] === value) {
            return this.records[key].clone();
          }
        }
      },
      findAllByAttribute: function(name, value) {
        return this.select(function(item) {
          return item[name] === value;
        });
      },
      each: function(callback) {
        var key, _results;

        _results = [];
        for (key in this.records) {
          _results.push(callback(this.records[key]));
        }
        return _results;
      },
      all: function() {
        return this.cloneArray(this.recordsValues());
      },
      first: function() {
        var record;

        record = this.recordsValues()[0];
        return record && record.clone();
      },
      last: function() {
        var record, values;

        values = this.recordsValues();
        record = values[values.length - 1];
        return record && record.clone();
      },
      count: function() {
        return this.recordsValues().length;
      },
      deleteAll: function() {
        var key, _results;

        _results = [];
        for (key in this.records) {
          _results.push(delete this.records[key]);
        }
        return _results;
      },
      destroyAll: function() {
        var key, _results;

        _results = [];
        for (key in this.records) {
          _results.push(this.records[key].destroy());
        }
        return _results;
      },
      update: function(id, atts) {
        return this.find(id).updateAttributes(atts);
      },
      create: function(atts) {
        var record;

        record = this.init(atts);
        return record.save();
      },
      destroy: function(id) {
        return this.find(id).destroy();
      },
      sync: function(callback) {
        return this.bind("change", callback);
      },
      fetch: function(callbackOrParams) {
        if (typeof callbackOrParams === "function") {
          return this.bind("fetch", callbackOrParams);
        } else {
          return this.trigger.apply(this, ["fetch"].concat(makeArray(arguments)));
        }
      },
      toJSON: function() {
        return this.recordsValues();
      },
      fromJSON: function(objects) {
        var i, results;

        if (!objects) {
          return;
        }
        if (typeof objects === "string") {
          objects = JSON.parse(objects);
        }
        if (isArray(objects)) {
          results = [];
          i = 0;
          while (i < objects.length) {
            results.push(this.init(objects[i]));
            i++;
          }
          return results;
        } else {
          return this.init(objects);
        }
      },
      recordsValues: function() {
        var key, result;

        result = [];
        for (key in this.records) {
          result.push(this.records[key]);
        }
        return result;
      },
      cloneArray: function(array) {
        var i, result;

        result = [];
        i = 0;
        while (i < array.length) {
          result.push(array[i].clone());
          i++;
        }
        return result;
      }
    });
    Model.include({
      model: true,
      newRecord: true,
      init: function(atts) {
        if (atts) {
          this.load(atts);
        }
        return this.trigger("init", this);
      },
      isNew: function() {
        return this.newRecord;
      },
      isValid: function() {
        return !this.validate();
      },
      validate: function() {},
      load: function(atts) {
        var name, _results;

        _results = [];
        for (name in atts) {
          _results.push(this[name] = atts[name]);
        }
        return _results;
      },
      attributes: function() {
        var attr, i, result;

        result = {};
        i = 0;
        while (i < this.parent.attributes.length) {
          attr = this.parent.attributes[i];
          result[attr] = this[attr];
          i++;
        }
        result.id = this.id;
        return result;
      },
      eql: function(rec) {
        return rec && rec.id === this.id && rec.parent === this.parent;
      },
      save: function() {
        var error;

        error = this.validate();
        if (error) {
          this.trigger("error", this, error);
          return false;
        }
        this.trigger("beforeSave", this);
        if (this.newRecord) {
          this.create();
        } else {
          this.update();
        }
        this.trigger("save", this);
        return this;
      },
      updateAttribute: function(name, value) {
        this[name] = value;
        return this.save();
      },
      updateAttributes: function(atts) {
        this.load(atts);
        return this.save();
      },
      destroy: function() {
        this.trigger("beforeDestroy", this);
        delete this.parent.records[this.id];
        this.destroyed = true;
        this.trigger("destroy", this);
        return this.trigger("change", this, "destroy");
      },
      dup: function() {
        var result;

        result = this.parent.init(this.attributes());
        result.newRecord = this.newRecord;
        return result;
      },
      clone: function() {
        return Object.create(this);
      },
      reload: function() {
        var original;

        if (this.newRecord) {
          return this;
        }
        original = this.parent.find(this.id);
        this.load(original.attributes());
        return original;
      },
      toJSON: function() {
        return this.attributes();
      },
      exists: function() {
        return this.id && this.id in this.parent.records;
      },
      update: function() {
        var clone, records;

        this.trigger("beforeUpdate", this);
        records = this.parent.records;
        records[this.id].load(this.attributes());
        clone = records[this.id].clone();
        this.trigger("update", clone);
        return this.trigger("change", clone, "update");
      },
      create: function() {
        var clone, records;

        this.trigger("beforeCreate", this);
        if (!this.id) {
          this.id = Spine.guid();
        }
        this.newRecord = false;
        records = this.parent.records;
        records[this.id] = this.dup();
        clone = records[this.id].clone();
        this.trigger("create", clone);
        return this.trigger("change", clone, "create");
      },
      bind: function(events, callback) {
        return this.parent.bind(events, this.proxy(function(record) {
          if (record && this.eql(record)) {
            return callback.apply(this, arguments);
          }
        }));
      },
      trigger: function() {
        return this.parent.trigger.apply(this.parent, arguments);
      }
    });
    eventSplitter = /^(\w+)\s*(.*)$/;
    Controller = Spine.Controller = Class.create({
      tag: "div",
      initialize: function(options) {
        var key;

        this.options = options;
        for (key in this.options) {
          this[key] = this.options[key];
        }
        if (!this.el) {
          this.el = document.createElement(this.tag);
        }
        this.el = $(this.el);
        if (!this.events) {
          this.events = this.parent.events;
        }
        if (!this.elements) {
          this.elements = this.parent.elements;
        }
        if (this.events) {
          this.delegateEvents();
        }
        if (this.elements) {
          this.refreshElements();
        }
        if (this.proxied) {
          return this.proxyAll.apply(this, this.proxied);
        }
      },
      $: function(selector) {
        return $(selector, this.el);
      },
      delegateEvents: function() {
        var eventName, key, match, method, methodName, selector, _results;

        _results = [];
        for (key in this.events) {
          methodName = this.events[key];
          method = this.proxy(this[methodName]);
          match = key.match(eventSplitter);
          eventName = match[1];
          selector = match[2];
          if (selector === "") {
            _results.push(this.el.bind(eventName, method));
          } else {
            _results.push(this.el.delegate(selector, eventName, method));
          }
        }
        return _results;
      },
      refreshElements: function() {
        var key, _results;

        _results = [];
        for (key in this.elements) {
          _results.push(this[this.elements[key]] = this.$(key));
        }
        return _results;
      },
      delay: function(func, timeout) {
        return setTimeout(this.proxy(func), timeout || 0);
      }
    });
    Controller.include(Events);
    Controller.include(Log);
    Spine.App = Class.create();
    Spine.App.extend(Events);
    return Controller.fn.App = Spine.App;
  })();

  Spine.Model.Local = {
    extended: function() {
      this.sync(this.proxy(this.saveLocal));
      return this.fetch(this.proxy(this.loadLocal));
    },
    saveLocal: function() {
      var result;

      result = JSON.stringify(this);
      return localStorage[this.name] = result;
    },
    loadLocal: function() {
      var result;

      result = localStorage[this.name];
      if (!result) {
        return;
      }
      result = JSON.parse(result);
      return this.refresh(result);
    }
  };

  Finished = Nimbus.Model.setup("Finished", ["name", "done", "time", "duedate", "note", "order", "synced", "listid", "time_finished"]);

  Deletion = Nimbus.Model.setup("Deletion", ["deletion_id", "listid"]);

  Task = Nimbus.Model.setup("Task", ["name", "done", "time", "duedate", "note", "order", "listid", "parent_id", "level", "userid", "status", "start_date", "end_date", "synced", "priority"]);

  Task.extend({
    PreviousCache: {},
    DeletionStorage: Deletion,
    active: function(id) {
      return this.select(function(item) {
        return !item.done && (item.listid === id);
      });
    },
    done: function(id) {
      return this.select(function(item) {
        return !!item.done && (item.listid === id);
      });
    },
    list: function(id) {
      return this.select(function(item) {
        return item.listid === id;
      });
    },
    print_by_order: function() {
      var list, ordered, task, _i, _len, _ref, _results;

      _ref = List.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        console.log(list.name, list.id);
        ordered = Task.list(list.id).sort(Task.ordersort);
        _results.push((function() {
          var _j, _len1, _results1;

          _results1 = [];
          for (_j = 0, _len1 = ordered.length; _j < _len1; _j++) {
            task = ordered[_j];
            _results1.push(console.log(task.order, task.name, task.id, task.level, task.parent_id));
          }
          return _results1;
        })());
      }
      return _results;
    },
    find_larger_than_order_in_list: function(order, list, level) {
      return this.select(function(item) {
        return item.listid === list && item.level === level && item.order > order;
      });
    },
    find_task_by_parent_id: function(search_id) {
      return this.select(function(item) {
        return item.parent_id === search_id;
      });
    },
    synced: function() {
      return this.select(function(item) {
        return !item.synced || !item.updated;
      });
    },
    destroyDone: function(id) {
      return this.done(id).forEach(function(rec) {
        if (rec.synced === true) {
          Deletion.create({
            deletion_id: rec.id
          });
        }
        return rec.destroy();
      });
    },
    logDone: function(id) {
      return this.done(id).forEach(function(rec) {
        Finished.create({
          name: rec.name,
          note: rec.note,
          listid: rec.listid,
          time_finished: moment().format('MM/DD/YYYY')
        });
        return rec.destroy();
      });
    },
    find_by_user: function(id) {
      return this.select(function(item) {
        return item.userid === id;
      });
    },
    find_by_content: function(content) {
      return this.select(function(item) {
        return item.name === content;
      });
    },
    save_current_order_of_list: function(list) {
      var task, _i, _len, _ref;

      window.currently_syncing = true;
      _ref = Task.list(list);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.order !== window.taskdict[task.id].el.index()) {
          task.order = window.taskdict[task.id].el.index();
          task.save();
        }
      }
      return window.currently_syncing = false;
    },
    list_sort_by: function(listid, field_name, ascend_descend) {
      var a, counter, fieldsort, sorted, _i, _len, _results;

      if (ascend_descend) {
        fieldsort = function(a, b) {
          var x, y;

          x = a[field_name] != null ? a[field_name] : 0;
          y = b[field_name] != null ? b[field_name] : 0;
          if (x > y) {
            return -1;
          } else {
            return 1;
          }
        };
      } else {
        fieldsort = function(a, b) {
          var x, y;

          x = a[field_name] != null ? a[field_name] : 0;
          y = b[field_name] != null ? b[field_name] : 0;
          if (x < y) {
            return -1;
          } else {
            return 1;
          }
        };
      }
      sorted = Task.list(listid).sort(fieldsort);
      counter = 0;
      _results = [];
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        a = sorted[_i];
        a.order = counter;
        a.save();
        _results.push(counter = counter + 1);
      }
      return _results;
    }
  });

  Task.ordersort = function(a, b) {
    if (a.order < b.order) {
      return -1;
    } else {
      return 1;
    }
  };

  List = Nimbus.Model.setup("List", ["name", "description", "time", "updated", "google_id", "synced"]);

  List.extend({
    PrintAll: function() {
      var i, _i, _len, _ref, _results;

      _ref = List.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(console.log(i.name, i.id, i.google_id));
      }
      return _results;
    }
  });

  Version = Spine.Model.setup("Version", ["number"]);

  Version.extend(Spine.Model.Local);

  Initialized = Spine.Model.setup("Initialized", ["flag"]);

  Initialized.extend(Spine.Model.Local);

  TestStorage = Spine.Model.setup("TestStorage", ["stored"]);

  TestStorage.extend(Spine.Model.Local);

  BackgroundImage = Spine.Model.setup("BackgroundImage", ["image"]);

  BackgroundImage.extend(Spine.Model.Local);

  User = Nimbus.Model.setup("User", ["name", "role", "color", "pic"]);

  Comments = Nimbus.Model.setup("Comments", ["comment", "userid", "timestamp"]);

  exports = this;

  exports.Task = Task;

  exports.List = List;

  exports.Version = Version;

  exports.Initialized = Initialized;

  exports.Finished = Finished;

  exports.BackgroundImage = BackgroundImage;

  exports.User = User;

  jQuery(function($) {
    window.Tasks = Spine.Controller.create({
      tag: "li",
      proxied: ["render", "remove", "delete_userid", "save_order_of_list"],
      events: {
        "change   input[type=checkbox]": "toggle",
        "click    .destroy": "destroy",
        "dblclick .item": "edit",
        "click .item": "toggle_select",
        "keypress input[type=text]": "blurOnEnter"
      },
      elements: {
        "input.name": "input",
        ".item": "wrapper",
        ".duedate_field": "inputdate",
        "textarea.note": "textarea",
        ".user_selection": "user_selection",
        ".startdate": "start_date",
        ".enddate": "end_date"
      },
      delete_userid: function() {
        console.log(this);
        this.item.userid = null;
        this.item.save();
        return this.render;
      },
      bind_user: function() {
        if ((this.item.userid != null) && User.exists(this.item.userid)) {
          this.assignee = User.find(this.item.userid);
          this.assignee.bind("update", this.render);
          return this.assignee.bind("destroy", this.delete_userid);
        }
      },
      init: function() {
        this.item.bind("update", this.save_order_of_list);
        this.item.bind("update", this.render);
        window.taskdict[this.item.id] = this;
        this.item.bind("destroy", this.remove);
        return this.bind_user();
      },
      save_order_of_list: function() {
        var diff, previous, record;

        log("SAVE ORDER OF LIST");
        if (window.currently_syncing) {
          return true;
        }
        previous = this.item;
        record = Task.find(this.item.id);
        diff = Task.diff_objects(previous, record);
        log(record);
        log("DIFF", diff);
        if (diff["listid"] != null) {
          log("changed list id");
          Task.save_current_order_of_list(record.listid);
          Task.save_current_order_of_list(previous.listid);
          window.assign_parents(Task.list(record.listid).sort(Task.ordersort));
          return window.assign_parents(Task.list(previous.listid).sort(Task.ordersort));
        } else {
          if (diff["order"] || diff["parent"]) {
            log("calling assign parents");
          }
          Task.save_current_order_of_list(record.listid);
          return window.assign_parents(Task.list(record.listid).sort(Task.ordersort));
        }
      },
      render: function() {
        var elements;

        this.item = Task.find(this.item.id);
        elements = $("#taskTemplate").tmpl(this.item);
        this.el.html(elements);
        this.refreshElements();
        this.el.data("id", this.item.id);
        return this;
      },
      toggle: function() {
        this.item = Task.find(this.item.id);
        this.item.done = !this.item.done;
        this.item.time = moment().toString();
        return this.item.save();
      },
      destroy: function() {
        return this.item.destroy();
      },
      edit: function() {
        var _this = this;

        $("#dialog_task_name").val(this.item.name);
        $("#dialog_task_note").val(this.item.note);
        $("#dialog_task_status").val(this.item.status);
        if (this.item.start_date != null) {
          $("#dialog_task_startdate").val(this.item.start_date);
        }
        if (this.item.end_date != null) {
          $("#dialog_task_enddate").val(this.item.end_date);
        }
        if (this.item.priority != null) {
          $("#dialog_task_priority").val(this.item.priority);
        } else {
          $("#dialog_task_priority").val("0");
        }
        window.hide_based_on_user();
        $("#dialog_task").dialog({
          modal: true,
          title: "Edit Task",
          dialogClass: "adding",
          buttons: [
            {
              text: 'Save Task',
              id: 'dialog_task_save_btn',
              click: function() {
                var element;

                $("#dialog_task_name").blur();
                $("#dialog_task_note").blur();
                $("#dialog_task").dialog("close");
                _this.item.updateAttributes({
                  name: $("#dialog_task_name").val(),
                  time: moment().toString(),
                  note: $("#dialog_task_note").val(),
                  userid: $("#dialog_task_user_id").val(),
                  start_date: $("#dialog_task_startdate").val(),
                  end_date: $("#dialog_task_enddate").val(),
                  status: $("#dialog_task_status").val(),
                  priority: $("#dialog_task_priority").val()
                });
                if ($(".selected").attr("id") === "views_tab") {
                  _this.el.addClass("task_selected");
                }
                element = _this.el;
                $("li").each(function(idx, value) {
                  if ($(value).data("id") === $(element).data("id")) {
                    return window.cur = idx;
                  }
                });
                window.last_opened = "";
                return _this.bind_user();
              }
            }
          ],
          beforeClose: function() {
            $("#dialog_task_name").blur();
            return $("#dialog_task_note").blur();
          },
          open: function() {
            var user, _i, _len, _ref;

            $('#dialog_task_user_id').html("");
            $('#dialog_task_user_id').append("<option value=''></option>");
            _ref = User.all();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              user = _ref[_i];
              $('#dialog_task_user_id').append("<option value='" + user.id + "'>" + user.name + "</option>");
            }
            $("#dialog_task_user_id").val(_this.item.userid);
            return window.hide_based_on_user();
          }
        });
        return $("#dialog_task_name").focus();
        /*
        if @wrapper.hasClass "editing"
          return
        
        if @el.hasClass "task_selected"
          @el.removeClass "task_selected"
        
        if window.last_opened isnt ""
          window.taskdict[window.last_opened].close()
        window.last_opened = @item.id
        
        @wrapper.addClass "editing"
        @input.focus()
        
        user = @user_selection
        
        $.each User.all(), (key, value) ->
          user.append('<option value="'+value.id+'">'+value.name+'</option>')
        
        $( @user_selection ).val(@item.userid)
        */

      },
      blurOnEnter: function(e) {
        if (e.keyCode === 13) {
          return e.target.blur();
        }
      },
      toggle_select: function() {
        var element;

        if (this.wrapper.hasClass("editing")) {
          return;
        }
        if (window.last_opened !== "") {
          window.taskdict[window.last_opened].close();
        }
        window.last_opened = "";
        $(".task_selected").removeClass("task_selected");
        element = this.el;
        $("li").each(function(idx, value) {
          if ($(value).data("id") === $(element).data("id")) {
            return window.cur = idx;
          }
        });
        return this.el.addClass("task_selected");
      },
      remove: function() {
        var record, x, _i, _len, _ref;

        record = this.item;
        log("removing record", record);
        if (record.order === 0) {
          _ref = Task.find_task_by_parent_id(record.id);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            window.currently_syncing = true;
            x.level = Number(x.level) - 1;
            x.save();
            window.currently_syncing = false;
          }
        }
        Task.save_current_order_of_list(record.listid);
        window.assign_parents(Task.list(record.listid).sort(Task.ordersort));
        return this.el.remove();
      }
    });
    window.TaskApp = Spine.Controller.create({
      tag: "div",
      proxied: ["addAll", "render", "renderCount", "remove", "attach"],
      events: {
        "click  .clear": "clear",
        "click  a.add": "addOne",
        "click  .deletelist": "deletelist",
        "click  .editlist": "editlist",
        "submit form.addform": "create_new",
        "click .peoplesort": "peoplesort",
        "click .startsort": "startsort",
        "click .endsort": "endsort",
        "click .statussort": "statussort",
        "click .prioritysort": "prioritysort"
      },
      elements: {
        ".items": "items",
        ".countVal": "count",
        ".clear": "clear",
        ".add": "add",
        ".addinputs .addtasks": "input",
        ".addinputs": "addform"
      },
      init: function() {
        this.item.bind("update", this.render);
        this.item.bind("update", this.attach);
        this.item.bind("destroy", this.remove);
        return Task.bind("change", this.renderCount);
      },
      sort: function() {
        return alert("test");
      },
      peoplesort: function() {
        Task.list_sort_by(this.item.id, "userid", false);
        window.assign_order(Task.list(this.item.id));
        return List.find(this.item.id).save();
      },
      startsort: function() {
        Task.list_sort_by(this.item.id, "start_date", false);
        window.assign_order(Task.list(this.item.id));
        return List.find(this.item.id).save();
      },
      endsort: function() {
        Task.list_sort_by(this.item.id, "end_date", false);
        window.assign_order(Task.list(this.item.id));
        return List.find(this.item.id).save();
      },
      statussort: function() {
        Task.list_sort_by(this.item.id, "status", true);
        window.assign_order(Task.list(this.item.id));
        return List.find(this.item.id).save();
      },
      prioritysort: function() {
        Task.list_sort_by(this.item.id, "priority", true);
        window.assign_order(Task.list(this.item.id));
        return List.find(this.item.id).save();
      },
      addAll: function() {
        var a, ordered;

        ordered = Task.list(this.item.id).sort(Task.ordersort);
        a = this.el;
        return $.each(ordered, function(key, value) {
          var view;

          view = Tasks.init({
            item: value
          });
          return a.find(".items").append(view.render().el);
        });
      },
      render: function() {
        var elements, tab_el, tab_html, tab_id, this_element, this_tab;

        this.item = List.find(this.item.id);
        elements = $("#listTemplate").tmpl(this.item);
        this.el.html(elements);
        this.refreshElements();
        this.el.data("id", this.item.id);
        this.addAll();
        if (this.item.id === "@default") {
          this.el.addClass("firstlist");
        }
        this.renderCount();
        tab_el = $(".listfilter");
        tab_id = "l" + (String(this.item.id).replace("@", ""));
        $("#" + tab_id).remove();
        tab_html = "<button id='" + tab_id + "'>" + this.item.name + "</button>";
        tab_el.prepend(tab_html);
        this.tab = $(String("#" + tab_id));
        this_element = "#" + this.item.id;
        this_tab = this.tab;
        this.tab.click(function() {
          $(".listdiv").hide();
          if (this_element === "#@default") {
            $(".firstlist .listdiv").show();
          } else {
            $(this_element).show();
          }
          $(".filterselected").removeClass("filterselected");
          return this_tab.addClass("filterselected");
        });
        return this;
      },
      renderCount: function() {
        var active, inactive;

        active = Task.active(this.item.id).length;
        this.count.text(active);
        return inactive = Task.done(this.item.id).length;
      },
      clear: function() {
        return Task.logDone(this.item.id);
      },
      addOne: function() {
        var new_task, view;

        new_task = Task.create({
          name: "",
          time: moment().toString(),
          done: false,
          order: Task.all().length + 1,
          synced: false,
          listid: this.item.id,
          parent_id: ""
        });
        view = Tasks.init({
          item: new_task
        });
        this.items.append(view.render().el);
        return view.edit();
      },
      deletelist: function() {
        var current_item;

        current_item = this.item;
        return $("#dialog_confirmdelete").dialog({
          modal: true,
          title: 'Delete the list',
          buttons: {
            'Yes': function() {
              var task, _i, _len, _ref;

              $("#dialog_confirmdelete").dialog("close");
              _ref = Task.list(current_item.id);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                task = _ref[_i];
                task.destroy();
              }
              return current_item.destroy();
            },
            'No': function() {
              return $("#dialog_confirmdelete").dialog("close");
            }
          }
        });
      },
      create_new: function() {
        var input_value, new_task, view;

        input_value = this.input.val().replace("'", "''");
        new_task = Task.create({
          name: input_value,
          time: moment().toString(),
          done: false,
          order: Task.list(this.item.id).length + 1,
          listid: this.item.id,
          parent_id: ""
        });
        view = Tasks.init({
          item: new_task
        });
        this.items.append(view.render().el);
        this.input.val("");
        return false;
      },
      remove: function() {
        this.el.remove();
        return this.tab.remove();
      },
      editlist: function() {
        var d;

        $("#list_name").val(this.item.name);
        $("#list_description").val(this.item.description);
        d = $("#dialog_addlist").dialog({
          modal: true,
          title: "Edit this list",
          dialogClass: "editing",
          buttons: {
            'Edit List': function() {
              edit_list();
              return $(this).dialog("close");
            }
          }
        });
        return d.data("id", this.item.id);
      },
      attach: function() {
        this.el.find(".roundedlist").sortable({
          stop: function(event, ui) {
            var current, current_list_id, id;

            window.ui = ui;
            id = ui.item.find(".id").attr("value");
            current = Task.find(id);
            current_list_id = window.ui.item.parent().attr("id").split("_")[0];
            log("dragged and dropped", current.name);
            current.listid = current_list_id;
            current.order = ui.item.index();
            current.time = moment().toString();
            return current.save();
          },
          connectWith: ".connectedsortable"
        });
        this.el.find(".addinputs").toggle();
        this.el.find(".addtoggle").click(function(event) {
          var clicked;

          clicked = $(this);
          clicked.toggle();
          clicked.parent().children(".addinputs").toggle();
          return clicked.parent().find(".addinputs .addtasks").focus();
        });
        return this.el.find(".doneadding").click(function(event) {
          var clicked;

          clicked = $(this);
          clicked.parent().parent().children(".addtoggle").toggle();
          return clicked.parent().toggle();
        });
      }
    });
    return window.allLists = Spine.Controller.create({
      el: $("#listsoftasks"),
      proxied: ["render"],
      init: function() {
        return this.render();
      },
      render: function() {
        var cur_el, lists;

        lists = List.all();
        cur_el = this.el;
        return $.each(lists, function(key, value) {
          var list;

          list = TaskApp.init({
            item: value
          });
          cur_el.append(list.render().el);
          return list.attach();
        });
      },
      render_new: function(item) {
        var list;

        list = TaskApp.init({
          item: item
        });
        this.el.append(list.render().el);
        return list.attach();
      }
    });
  });

  window.render_user_square = function(p) {
    var a, button_string, color_string, pic, render_string;

    if (p.pic != null) {
      pic = p.pic;
    } else {
      pic = "images/default-person.gif";
    }
    color_string = {
      '7bd148': "",
      '5484ed': "",
      'a4bdfc': "",
      '46d6db': "",
      '7ae7bf': "",
      '51b749': "",
      'fbd75b': "",
      'ffb878': "",
      'dc2127': "",
      'dbadff': "",
      'e1e1e1': ""
    };
    a = User.find(p.id);
    color_string[a.color] = "selected";
    if ((window.logged_in_user != null) && window.logged_in_user.id === p.id) {
      button_string = "<button class='small_blue_button' style='background: #1AB58A; border: 0px;'><text rel='label_delete_task'>You</text></button>";
    } else {
      button_string = "<button class='small_blue_button' onclick='window.remove_user(\"" + p.id + "\")'><text rel='label_delete_task'>Remove User</text></button>";
    }
    render_string = "<li class='useritem' id='" + p.id + "'>\n<img src='" + pic + "' /><span>" + p.name + "</span>\n<select name=\"colorpicker-picker\" id=\"" + p.id + "\">\n  <option value=\"#7bd148\" " + color_string['7bd148'] + ">Green</option>\n  <option value=\"#5484ed\" " + color_string['5484ed'] + ">Bold blue</option>\n  <option value=\"#a4bdfc\" " + color_string['a4bdfc'] + ">Blue</option>\n  <option value=\"#46d6db\" " + color_string['46d6db'] + ">Turquoise</option>\n  <option value=\"#7ae7bf\" " + color_string['7ae7bf'] + ">Light green</option>\n  <option value=\"#51b749\" " + color_string['51b749'] + ">Bold green</option>\n  <option value=\"#fbd75b\" " + color_string['fbd75b'] + ">Yellow</option>\n  <option value=\"#ffb878\" " + color_string['ffb878'] + ">Orange</option>\n  <option value=\"#ff887c\" " + color_string['ff887c'] + ">Red</option>\n  <option value=\"#dc2127\" " + color_string['dc2127'] + ">Bold red</option>\n  <option value=\"#dbadff\" " + color_string['dbadff'] + ">Purple</option>\n  <option value=\"#e1e1e1\" " + color_string['e1e1e1'] + ">Gray</option>\n</select>\n" + button_string + "\n</li>";
    $(".userlist").append(render_string);
    return $('select[name="colorpicker-picker"]').simplecolorpicker({
      picker: true
    }).on('change', function() {
      var color, id;

      log(this);
      color = $(this).val().replace("#", "");
      log(color);
      id = this.id;
      log(id);
      a = User.find(id);
      a.color = color;
      return a.save();
    });
  };

  window.render_user = function(callback) {
    log("render user");
    if (Nimbus.Auth.service === "GDrive") {
      return Nimbus.Share.get_users(function(permissions) {
        var a, p, _i, _len;

        log("return called");
        $(".userlist").html("");
        for (_i = 0, _len = permissions.length; _i < _len; _i++) {
          p = permissions[_i];
          log("p", p);
          if (!User.exists(p.id)) {
            a = User.init(p);
            a.color = "e1e1e1";
            a.save();
          }
          window.render_user_square(p);
        }
        if (callback != null) {
          return callback();
        }
      });
    }
  };

  window.render_current_user = function(callback) {
    log("current user");
    if (Nimbus.Auth.service === "GDrive") {
      return Nimbus.Share.get_me(function(me) {
        log("return get me called");
        window.logged_in_user = me;
        if (me.pic != null) {
          $("#logged_in_image").attr("src", me.pic);
        }
        if (callback != null) {
          return callback();
        }
      });
    }
  };

  window.add_user = function() {
    var email;

    email = $("#shareinput").val();
    if (email === "") {
      create("sticky", {
        "title": "Failed",
        "text": "Email empty"
      });
      return;
    }
    log("add user", email);
    $("#shareinput").val("");
    if (Nimbus.Auth.service === "GDrive") {
      create("sticky", {
        "title": "Adding user",
        "text": "Adding " + email
      });
      return Nimbus.Share.add_user(email, function(p) {
        var a;

        log("p", p);
        a = User.init(p);
        a.color = "e1e1e1";
        a.save();
        $('select[name="colorpicker-picker"]').simplecolorpicker({
          picker: true
        }).on('change', function() {
          var color, id;

          log(this);
          color = $(this).val().replace("#", "");
          log(color);
          id = this.id;
          log(id);
          a = User.find(id);
          a.color = color;
          return a.save();
        });
        return window.render_user_square(p);
      });
    }
  };

  window.remove_user = function(id) {
    log("remove user", id);
    if (Nimbus.Auth.service === "GDrive") {
      create("sticky", {
        "title": "Removing a user",
        "text": "In the process of removal"
      });
      return Nimbus.Share.remove_user(id, function() {
        var a;

        log("deleted user callback");
        $("#" + id).remove();
        a = User.find(id);
        a.destroy();
        return create("sticky", {
          "title": "Success",
          "text": "User removed"
        });
      });
    }
  };

  window.get_user = function(item) {
    if (User.exists(item.data.userid)) {
      return User.find(item.data.userid);
    }
  };

  window.get_space = function() {
    log("get spaces");
    if (Nimbus.Auth.service === "GDrive") {
      return Nimbus.Share.get_spaces(function(data) {
        var button_string, d, string, _i, _len, _results;

        $(".projectlist").html("");
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          d = data[_i];
          if (window.folder[Nimbus.Auth.app_name].id === d.id) {
            button_string = "<button class=\"small_blue_button forty\" onclick=\"switch_workspace(\'" + d.id + "\')\" style=\"background: #1AB58A; border: 0px;\"><text rel=\"label_delete_task\">Current Workspace</text></button>";
          } else {
            button_string = "<button class=\"small_blue_button forty\" onclick=\"switch_workspace(\'" + d.id + "\')\"><text rel=\"label_delete_task\">Switch to Workspace</text></button>";
          }
          string = "<li class=\"useritem\">\n<img src=\"images/default-person.gif\" />\n<span>" + d.owner + "'s workspace</span>\n" + button_string + "\n</li>";
          _results.push($(".projectlist").append(string));
        }
        return _results;
      });
    }
  };

  setting_url = "";

  window.last_opened = "";

  window.cur = 0;

  window.taskdict = {};

  window.obj = null;

  window.all_syncing = false;

  window.render_after_sync = function() {
    var tasklist, _i, _len, _ref, _results;

    _ref = List.all();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tasklist = _ref[_i];
      window.assign_order(Task.list(tasklist.id).sort(Task.ordersort));
      if ($("#" + tasklist.id).length > 0) {
        window.currently_syncing = true;
        List.find(tasklist.id).save();
        _results.push(window.currently_syncing = false);
      } else {
        _results.push(window.App.render_new(List.find(tasklist.id)));
      }
    }
    return _results;
  };

  window.sync_everything = function() {
    create("sticky", {
      "title": "Syncing",
      "text": "Pulling down data from the cloud"
    });
    return List.sync_all(function() {
      return User.sync_all(function() {
        return Task.sync_all(function() {
          var a, new_task;

          if (List.all().length === 0 && Task.all().length === 0) {
            a = List.create({
              "name": "Your first list"
            });
            new_task = Task.create({
              name: "Double click to edit a task",
              listid: a.id,
              done: false
            });
            new_task = Task.create({
              name: "Click on the button at the bottom and add the new task in the input, hit return to save",
              listid: a.id,
              done: false
            });
            new_task = Task.create({
              name: "Select a task and press tab to create a subtask",
              listid: a.id,
              done: false
            });
            new_task = Task.create({
              name: "Go to the setting menu to share this with your friends, only works with Google Drive",
              listid: a.id,
              done: false
            });
          }
          window.render_after_sync();
          window.render_current_user(window.render_user);
          window.get_space();
          window.create("sticky", {
            "title": "Syncing",
            "text": "Sync complete!"
          });
          return window.reset = true;
        });
      });
    });
  };

  window.switch_workspace = function(id) {
    create("sticky", {
      "title": "Switching workspace",
      "text": "In progress"
    });
    return Nimbus.Client.GDrive.switch_to_app_folder(id, function() {
      $("#listsoftasks").html("");
      $(".listfilter").html("");
      $(".listfilter").append('<span class="divider"></span>');
      $(".listfilter").append('<button class="filterselected" onclick="show_all_div()" id="allbutton">all</button>');
      create("sticky", {
        "title": "Switching workspace",
        "text": "Done"
      });
      return window.sync_everything();
    });
  };

  window.big_bang = function() {
    console.log("### BIG BANG CALLED");
    return jQuery(function($) {
      $("#listsoftasks").html("");
      $("#newtaskdate").datepicker({
        constrainInput: true,
        buttonImage: "famfamicons/calendar.png",
        buttonImageOnly: true,
        buttonText: "",
        showOn: "both",
        onSelect: function(dateText, inst) {
          if ($(this).parent().parent().find(".showdate").length === 1) {
            return $(this).parent().parent().find(".showdate").html(dateText);
          }
        }
      });
      window.container = $("#container").notify();
      updateItems();
      shortcut.add("up", prevItem, {
        disable_in_input: "true"
      });
      shortcut.add("down", nextItem, {
        disable_in_input: "true"
      });
      shortcut.add("tab", make_child, {
        disable_in_input: "true"
      });
      shortcut.add("shift+tab", untab, {
        disable_in_input: "true"
      });
      shortcut.add("enter", open_for_edit);
      shortcut.add("backspace", pressed_delete, {
        disable_in_input: "true"
      });
      shortcut.add("delete", pressed_delete, {
        disable_in_input: "true"
      });
      window.App = allLists.init();
      $(".app_tab:not(#views)").hide();
      $("#dialog_task_startdate").datepicker({
        beforeShow: function() {
          return $('#ui-datepicker-div').css('z-index', 2005);
        },
        constrainInput: true
      });
      $("#dialog_task_enddate").datepicker({
        constrainInput: true
      });
      List.sync_all(function() {
        return User.sync_all(function() {
          return Task.sync_all(function() {
            var a, new_task;

            if (List.all().length === 0 && Task.all().length === 0) {
              a = List.create({
                "name": "Your first list"
              });
              new_task = Task.create({
                name: "Double click to edit a task",
                listid: a.id,
                done: false
              });
              new_task = Task.create({
                name: "Click on the button at the bottom and add the new task in the input, hit return to save",
                listid: a.id,
                done: false
              });
              new_task = Task.create({
                name: "Select a task and press tab to create a subtask",
                listid: a.id,
                done: false
              });
              new_task = Task.create({
                name: "Go to the setting menu to share this with your friends, only works with Google Drive",
                listid: a.id,
                done: false
              });
            }
            window.render_after_sync();
            window.render_current_user(window.render_user);
            return window.get_space();
          });
        });
      });
      return setTimeout("$('#loading').fadeOut()", 3000);
    });
  };

  $(document).ready(function() {
    return $("body").layout({
      applyDefaultStyles: false,
      south: {
        resizable: false,
        spacing_open: 0
      },
      west: {
        resizable: false,
        spacing_open: 0
      }
    });
  });

  Nimbus.Auth.set_app_ready(big_bang);

  window.create = function(template, vars, opts) {
    return window.container.notify("create", template, vars, opts);
  };

  window.addlist_window = function() {
    $("#list_name").val("");
    $("#list_description").val("");
    return $("#dialog_addlist").dialog({
      modal: true,
      title: "Add A New List",
      dialogClass: "adding",
      buttons: {
        'Add List': function() {
          add_list();
          return $(this).dialog("close");
        }
      }
    });
  };

  window.add_list = function() {
    var description, name, newlist;

    name = $("#list_name").val();
    description = $("#list_description").val();
    newlist = List.create({
      name: name,
      description: description
    });
    /*
    newlist = List.init(
      name: name
      description: description
      time: moment().toString()
      synced: true
    )
    newlist.save()
    */

    window.App.render_new(newlist);
    return $("#dialog_addlist").dialog("close");
  };

  window.edit_list = function() {
    var curr_list;

    curr_list = List.find($("#dialog_addlist").data("id"));
    curr_list.name = $("#list_name").val();
    curr_list.description = $("#list_description").val();
    curr_list.time = moment().toString();
    curr_list.save();
    return $("#dialog_addlist").dialog("close");
  };

  window.edit_task = function() {
    return $("#dialog_task").dialog({
      modal: true,
      title: "Edit Task",
      dialogClass: "adding",
      buttons: {
        'Save Task': function() {
          alert("save task called");
          return $(this).dialog("close");
        }
      }
    });
  };

  window.toggle = function(tabSelector, elementSelector, activeElement, activeTab) {
    var list, _i, _len, _ref, _results;

    $(tabSelector).not(activeTab).removeClass("selected");
    $(activeTab).addClass("selected");
    $(elementSelector).not(activeElement).hide();
    $(activeElement).show();
    $("#sidebar_dark").attr("class", activeElement.replace("#", ""));
    if (activeElement === '#calendarview') {
      $("#calendar").fullCalendar("refetchEvents");
      $("#calendar").fullCalendar("windowResize");
    }
    if (window.reset && activeElement === "#views") {
      window.reset = false;
      _ref = List.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        _results.push(list.save());
      }
      return _results;
    }
  };

  window.show_all_div = function() {
    $(".listdiv").show();
    $(".filterselected").removeClass("filterselected");
    return $("#allbutton").addClass("filterselected");
  };

  window.hide_based_on_user = function() {
    if ($("#dialog_task_user_id").val() === "") {
      return $("#dialog_task_status_row").hide();
    } else {
      return $("#dialog_task_status_row").show();
    }
  };

  waitForFinalEvent = (function() {
    var timers;

    timers = {};
    return function(callback, ms, uniqueId) {
      if (!uniqueId) {
        uniqueId = "Don't call this twice without a uniqueId";
      }
      if (timers[uniqueId]) {
        clearTimeout(timers[uniqueId]);
      }
      return timers[uniqueId] = setTimeout(callback, ms);
    };
  })();

  window.open_help = function() {
    if ($("#sidebar_dark").hasClass("views") || $("#views_tab").hasClass("selected")) {
      return $("#dialog_help").dialog({
        modal: true,
        title: 'Task View'
      });
    } else if ($("#sidebar_dark").hasClass("gantt_view")) {
      return $("#dialog_help_gantt").dialog({
        modal: true,
        title: 'Gantt View'
      });
    } else if ($("#sidebar_dark").hasClass("people_view")) {
      return $("#dialog_help_people").dialog({
        modal: true,
        title: 'People View'
      });
    } else {
      return log("no help availible");
    }
  };

  window.loading = function() {
    log("ANIMATION Called");
    if (!Nimbus.Auth.authorized()) {
      $("#progress").hide();
      $("#login_buttons").fadeIn();
      return $("#logo_text").fadeIn();
    }
  };

  window.setTimeout("window.loading()", 3000);

  window.logout = function() {
    Nimbus.Auth.logout();
    $("#loading").show();
    $("#progress").hide();
    $("#login_buttons").fadeIn();
    return $("#logo_text").fadeIn();
  };

  window.screencast = function() {
    return $("#dialog_screencast").dialog({
      modal: true,
      title: "Screencast",
      width: "666",
      zIndex: 10010
    });
  };

  window.assign_parents = function(tasks) {
    var latest_parent, modified, previous_level, task, tracker, _i, _len;

    tracker = {};
    modified = [];
    tasks = tasks.sort(Task.ordersort);
    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
      task = tasks[_i];
      log("order", task.name);
      if ((task.level == null) || Number(task.level) === 0) {
        tracker[0] = task.id;
        task.level = 0;
        if (task.parent_id !== "") {
          task.parent_id = "";
          task.save();
        } else {
          log("no change really");
          window.currently_syncing = true;
          task.save();
          window.currently_syncing = false;
        }
        modified.push(task.id);
      } else {
        console.log("tried to assign", task.name);
        if (task.order === 0) {
          task.level = 0;
          window.currently_syncing = true;
          task.save();
          window.currently_syncing = false;
          break;
        }
        tracker[Number(task.level)] = task.id;
        previous_level = Number(task.level) - 1;
        latest_parent = tracker[previous_level];
        if (latest_parent !== task.parent_id) {
          task.parent_id = latest_parent;
          task.time = moment().toString();
          task.save();
          modified.push(task.id);
        }
      }
    }
    return modified;
  };

  /*
  #test 1, two level 0', nothing happens
  a = id:"one", level:"0"
  b = id:"two", level:"0"
  
  window.test_array_1 = [ a, b ]
  
  #test 2, one level 0, one level 1, result should be the first is the parent of the second
  c = id:"one", level:"0"
  d = id:"two", level:"1"
  
  window.test_array_2 = [ c, d ]
  
  #test 3, level 0, 1, 2, results should be a chain of parents
  e = id:"one", level:"0"
  f = id:"two", level:"1"
  g = id:"three", level:"2"
  
  window.test_array_3 = [ e, f, g ]
  
  #test 4, level 0, 0, 1, result N N 2
  h = id:"one", level:"0"
  i = id:"two", level:"0"
  j = id:"three", level:"1"
  
  window.test_array_4 = [ h, i, j ]
  */


  window.counter = 0;

  window.bypass = {};

  window.task_parent = {};

  window.assign_children = function(parent, childs, parent_dict) {
    var child, _i, _len, _ref, _results;

    _ref = parent_dict[parent.id];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.order = window.counter;
      child.level = parent.level + 1;
      child.save();
      window.counter = window.counter + 1;
      if (parent_dict[child.id] != null) {
        _results.push(window.assign_children(child, parent_dict[child.id], parent_dict));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.assign_order = function(tasks) {
    var task, _i, _j, _len, _len1;

    window.counter = 0;
    window.task_parent = {};
    window.currently_syncing = true;
    log(tasks);
    tasks = tasks.sort(Task.ordersort);
    log("Assign Order tasks", tasks);
    for (_i = 0, _len = tasks.length; _i < _len; _i++) {
      task = tasks[_i];
      if (task.parent_id != null) {
        if (window.task_parent[task.parent_id] != null) {
          window.task_parent[task.parent_id].push(task);
        } else {
          window.task_parent[task.parent_id] = [task];
        }
      }
    }
    log("parent div", window.task_parent);
    for (_j = 0, _len1 = tasks.length; _j < _len1; _j++) {
      task = tasks[_j];
      if ((window.task_parent[task.id] != null) && ((task.parent_id === null) || (task.parent_id === "") || (task.parent_id === void 0))) {
        task.order = window.counter;
        task.level = 0;
        task.save();
        window.counter = window.counter + 1;
        window.assign_children(task, parent[task.id], parent);
      } else if ((task.parent_id != null) && task.parent_id !== "") {
        log(task.name, " already assigned or going to be assigned");
      } else {
        task.order = window.counter;
        task.level = 0;
        task.save();
        window.counter = window.counter + 1;
      }
    }
    return window.currently_syncing = false;
  };

  /*
  #test that the parent mapping works
  l = List.init( id: "thelist", name: "thelist" )
  l.save()
  a = Task.init( id:"one", order: 1, listid: "thelist" )
  a.save()
  b = Task.init( id:"two", parent_id:"one", order: 2, listid: "thelist" )
  b.save()
  c = Task.init( id:"three", parent_id:"one", order: 3, listid: "thelist" )
  c.save()
  
  window.test_array_i = [a, b, c]
  */


  nextItem = function() {
    if ($("textarea:focus").length === 0 && $("input:focus").length === 0) {
      if (cur < ($("li").length - 1)) {
        window.cur++;
      } else {
        window.cur = 0;
      }
      updateItems();
    }
    return true;
  };

  prevItem = function() {
    if ($("textarea:focus").length === 0 && $("input:focus").length === 0) {
      if (cur > 0) {
        window.cur--;
      } else {
        window.cur = $("li").length - 1;
      }
      updateItems();
    }
    return true;
  };

  updateItems = function() {
    $("li.task_selected").removeClass("task_selected");
    return $("li:eq(" + cur + ")").addClass("task_selected");
  };

  open_for_edit = function(e) {
    var task_controller;

    if (e.target.className !== 'addtasks') {
      if ($("#dialog_task").dialog("isOpen") === true) {
        return $("#dialog_task_save_btn").click();
      } else {
        task_controller = window.taskdict[$(".task_selected").data("id")];
        task_controller.edit();
        return true;
      }
    } else {
      return $(e.target).parent().submit();
    }
  };

  pressed_delete = function() {
    var current, r, task_controller;

    r = confirm("Are you sure you want to delete this task?");
    if ($("textarea:focus").length === 0 && $("input:focus").length === 0) {
      if (r) {
        current = Task.find($(".task_selected").data("id"));
        task_controller = window.taskdict[$(".task_selected").data("id")];
        return task_controller.destroy();
      }
    }
  };

  make_child = function() {
    var current, task_controller;

    if ($("textarea:focus").length === 0 && $("input:focus").length === 0) {
      current = Task.find($(".task_selected").data("id"));
      task_controller = window.taskdict[$(".task_selected").data("id")];
      if (task_controller.el.index() === 0) {
        alert("The first task cannot be made into a child");
        return;
      } else {
        if (((current.parent_id != null) && current.parent_id !== "") && Task.find(current.parent_id).order === (current.order - 1)) {
          return;
        } else {
          if (current.level == null) {
            current.level = 0;
          }
          current.level = Number(current.level) + 1;
          current.time = moment().toString();
          current.save();
          window.assign_parents(Task.list(current.listid));
          $(task_controller.el).find(".item").addClass("child_" + current.level);
        }
      }
    }
    return true;
  };

  recurse_through_children = function(parent) {
    var child, children, _i, _len, _results;

    children = Task.find_task_by_parent_id(parent);
    log("CHILDREN", children);
    _results = [];
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      child = children[_i];
      child.level = child.level - 1;
      child.time = moment().toString();
      child.save();
      _results.push(recurse_through_children(child.id));
    }
    return _results;
  };

  untab = function() {
    var current, task_controller;

    if ($("textarea:focus").length === 0 && $("input:focus").length === 0) {
      current = Task.find($(".task_selected").data("id"));
      task_controller = window.taskdict[$(".task_selected").data("id")];
      if (current.level === 0 || (current.level == null)) {
        return;
      } else {
        window.currently_syncing = true;
        current.level = current.level - 1;
        current.time = moment().toString();
        current.save();
        recurse_through_children(current.id);
        window.currently_syncing = false;
        window.assign_parents(Task.list(current.listid));
        $(task_controller.el).find(".item").addClass("child_" + current.level);
      }
    }
    return true;
  };

  exports = this;

  this.nextItem = nextItem;

  this.prevItem = prevItem;

  this.updateItems = updateItems;

  this.open_for_edit = open_for_edit;

  this.pressed_delete = pressed_delete;

  this.make_child = make_child;

  this.untab = untab;

}).call(this);
